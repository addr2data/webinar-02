---
Parameters:
  KeyPairName:
    Type: String
    Default: webinar
    Description: Name of existing KeyPair

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.2.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: false
      Tags:
        - Key: Name
          Value: webinar-02
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: webinar-02-igw
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  FloatingIpAddressNatGateway:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: !GetAtt FloatingIpAddressNatGateway.AllocationId
      SubnetId: !Ref PublicSubnet1
    DependsOn: DefaultRoutePublic
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.128.0/23
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: webinar-02-sub-public-01
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.130.0/23
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: webinar-02-sub-public-02
      VpcId: !Ref VPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.0.0/23
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: webinar-02-sub-private-01
      VpcId: !Ref VPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.2.0/23
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: webinar-02-sub-private-02
      VpcId: !Ref VPC
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: webinar-02-rt-public
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: webinar-02-rt-private
  AssociateSubnetWeb1RouteTablePublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet1
  AssociateSubnetWeb1RouteTablePublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet2
  AssociateSubnetWeb1RouteTablePrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet1
  AssociateSubnetWeb1RouteTablePrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet2
  DefaultRoutePublic:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic
    DependsOn: AttachInternetGateway
  DefaultRoutePrivate:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref RouteTablePrivate
    DependsOn: NatGateway
  SecurityGroupWebInstances:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: webinar-02-sg-web-public
      GroupDescription: "Security group for public webservers."
      SecurityGroupIngress:
        - 
          CidrIp: 10.2.128.0/23
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - 
          CidrIp: 10.2.130.0/23
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VPC
  SecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: webinar-02-sg-lb-app
      GroupDescription: "Security Group for Application Load balancer."
      SecurityGroupIngress:
        - 
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref VPC
  LoadBalancerPublic:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: webinar-02-lb-public
      Scheme: internet-facing
      SecurityGroups: 
        - SecurityGroupLoadBalancer
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
  TargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      Name: webinar-02-tg-public
      Port: 80
      Protocol: HTTP
      ProtocolVersion:  HTTP1
      VpcId: !Ref VPC
